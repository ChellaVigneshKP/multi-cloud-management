name: Snyk Security

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Snyk CLI
      - name: Set up Snyk CLI
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 3: Scan the Frontend (Node.js)
      - name: Install dependencies (Frontend)
        working-directory: ./frontend
        run: npm install

      - name: Snyk Code test (Frontend)
        working-directory: ./frontend
        run: snyk code test --sarif > snyk-code-frontend.sarif || true

      - name: Snyk Open Source monitor (Frontend)
        working-directory: ./frontend
        run: snyk monitor || true

      # Step 4: Set up Java 21 for Backend (Java/Maven)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      # Step 5: Scan the Backend (Java/Maven)
      - name: Build and scan backend services
        run: |
          for service in backend/*; do
            if [ -f "$service/pom.xml" ]; then
              echo "Building and scanning $service..."
              mvn -f $service/pom.xml compile
              snyk test --file=$service/pom.xml || true
              snyk monitor --file=$service/pom.xml || true
            fi
          done

      # Step 6: Scan the VMService (Python)
      - name: Install dependencies (VMService)
        working-directory: ./vmservice
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Snyk Code test (VMService)
        working-directory: ./vmservice
        run: snyk code test --sarif > snyk-code-vmservice.sarif || true

      - name: Snyk Open Source monitor (VMService)
        working-directory: ./vmservice
        run: snyk monitor || true

      # Step 7: Push SARIF results to GitHub
      - name: Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code-frontend.sarif

      - name: Upload SARIF results to GitHub (VMService)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code-vmservice.sarif
